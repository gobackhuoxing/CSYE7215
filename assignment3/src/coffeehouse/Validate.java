package coffeehouse;

import java.util.ArrayList;
import java.util.List;

import coffeehouse.SimulationEvent;


/**
 * Validates a simulation
 */
public class Validate {
	private static class InvalidSimulationException extends Exception {
		public InvalidSimulationException() { }
	};

	// Helper method for validating the simulation
	private static void check(boolean check,
			String message) throws InvalidSimulationException {
		if (!check) {
			System.err.println("SIMULATION INVALID : "+message);
			throw new Validate.InvalidSimulationException();
		}
	}

	/** 
	 * Validates the given list of events is a valid simulation.
	 * Returns true if the simulation is valid, false otherwise.
	 *
	 * @param events - a list of events generated by the simulation
	 *   in the order they were generated.
	 *
	 * @returns res - whether the simulation was valid or not
	 */
	public static boolean validateSimulation(List<SimulationEvent> events,
			int numCustomers, 
			int numCooks,
			int numTables, 
			int machineCapacity,
			boolean randomOrders) {
		try {
			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
					"Simulation didn't start with initiation event");
			check(events.get(events.size()-1).event == SimulationEvent.EventType.SimulationEnded,
					"Simulation didn't end with termination event");
			
			//Should not have more eaters than specified
			List<SimulationEvent> customer = new ArrayList<SimulationEvent>();
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CustomerStarting) {
					customer.add(event);
				}
			}
			check(customer.size()==numCustomers,
					"Simulation have wrong customer number");
			
			//Should not have more cooks than specified
			List<SimulationEvent> cooks = new ArrayList<SimulationEvent>();
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CookStarting) {
					cooks.add(event);
				}
			}
			check(cooks.size()==numCooks,
					"Simulation have wrong cook number");
			
			//The coffee shop capacity should not be exceeded
			int currentCustomer = 0;
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CustomerEnteredCoffeeShop) {
					currentCustomer++;
					
				}
				else if(event.event==SimulationEvent.EventType.CustomerLeavingCoffeeShop) {
					currentCustomer--;
				}
				check(currentCustomer<=numTables,
						"exceed coffee shop capacity");
			}
			
			//The capacity of each machine should not be exceeded
			int machineGrill = 0;
			int fryer = 0;
			int coffeeMaker2000 =0;
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.MachineStartingFood) {
					if(event.machine.machineName.equals("machineGrill")) machineGrill++;
					else if (event.machine.machineName.equals("fryer")) fryer++;
					else if (event.machine.machineName.equals("coffeeMaker2000")) coffeeMaker2000++;
				}
				else if(event.event==SimulationEvent.EventType.MachineDoneFood) {
					if(event.machine.machineName.equals("machineGrill")) machineGrill--;
					else if (event.machine.machineName.equals("fryer")) fryer--;
					else if (event.machine.machineName.equals("coffeeMaker2000")) coffeeMaker2000--;
				}
				
				check(machineGrill<=machineCapacity && fryer<=machineCapacity && coffeeMaker2000<=machineCapacity,
						"exceed machine capacity");
			}
			
			//Eater should not receive order until cook completes it
			ArrayList<Integer> completeOrder = new ArrayList<Integer>();
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CookCompletedOrder) completeOrder.add(event.orderNumber);
				else if (event.event==SimulationEvent.EventType.CustomerReceivedOrder) {
					boolean orderComplete= false;
					for (int orderNum:completeOrder) {
						if(orderNum==event.orderNumber) {
							orderComplete =true;
							break;
						}
					}
					check(orderComplete,"Customer received a unfinished order");
				}
			}
			
			//Eater should not leave coffee shop until order is received
			ArrayList<Customer> leavingCustomer = new ArrayList<Customer>();
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CustomerReceivedOrder) leavingCustomer.add(event.customer);
				else if (event.event==SimulationEvent.EventType.CustomerLeavingCoffeeShop) {
					boolean orderReceived= false;
					for (Customer cus:leavingCustomer) {
						if(cus.toString().equals(event.customer.toString())) {
							orderReceived =true;
							break;
						}
					}
					check(orderReceived,"Customer leave without receiveing order");
				}
			}
			
			//Eater should not place more than one order
			ArrayList<Customer> OrderedCustomer = new ArrayList<Customer>();
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CustomerPlacedOrder) {
					if(OrderedCustomer.contains(event.customer)){
						check(false,"Customer place more than one order");
					}
					else OrderedCustomer.add(event.customer);
				}
			}
			
			//Cook should not work on order before it is placed
			ArrayList<Integer> Ordered = new ArrayList<Integer>();
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CustomerPlacedOrder) Ordered.add(event.orderNumber);
				else if(event.event==SimulationEvent.EventType.CookReceivedOrder) {
					boolean orderReceived= false;
					for(int num: Ordered) {
						if(num==event.orderNumber) {
							orderReceived = true;
							break;
						}
					}
					check(orderReceived,"Cook receive order before it is placed");
				}
			}

			//Customer should receive the correct order
			for(SimulationEvent event:events) {
				if(event.event==SimulationEvent.EventType.CustomerReceivedOrder) {
					if(event.orderNumber!=event.customer.getOrderNum()) {
						check(false,"Customer receive wrong order");
					}
				}
			}
			return true;
		} catch (InvalidSimulationException e) {
			return false;
		}
	}
}
